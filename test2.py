#createlist
#для создания переменной типа список нужно определиться с названием переменной поставить = и написать значения через запятую
a = [1, 1.1, 'a', [1], (1,1.1), {1,2}, {'a': 1}, None, True]
#список в котором целое; вещественноеж строковое; другой список; кортеж; множество; словарь; пустой тип; булевый тип.
a = [] #пустой список
b = list () #пустой список
a = (1,2.1, 3) #раньше я был кортежем
list(a) # (1,2.1, 3), но а остался кортежем
b = list ('abc') #['a','b', 'c']
#retrivelist
a = [1, 1.1, 'a']
print(a) #[1, 1.1, 'a']
print([1, 1.1, 'a']) #[1, 1.1, 'a']
a = [1, 1.1, 'a']
a[0] #1
a[1] # 1.1
a [2] #'a'
a [3] # ошибка вышли за границы
a[-1] #'a'
a[-2] #1.1
a[-3] #1
a[-4] # ошибка вышли за границы
a = [1, 2, 3]
a.index(3) #2. Возвращает индекс, где передаваемые значение стоит в списке. в примере вернется 2, так как значение 3 в списке стоит на 2-ом индексе
#updatelist
a = [1, 1.1, 'a']
a[0] = 'a' # теперь 'a' равно [1, 1.1, 'a']
a[1] = 'б' #теперь 'а' равно [1, 'б', 'a']
a[-1] = 'в' # Теперь 'а' равно [1, 1.1, 'в']
a = [1,2,3] # Теперь 'а' равно [1, 2, 3]
a = [1, 2, 3]
a.append(4) # Добавляет значение (объект) в конец списка. Добавляет только один объект или значение. Теперь "а" [1, 2, 3, 4
a.append(['al', 'b']) # Teneерь "а"
1, 2, 3, 4, ['a', 'b'] #Не забываем, что методы в списке изменяют значения и структуру в самом списке.
a = [1, 2, 3]
a.insert(0, 4) # Добавляет значение (объект), что стоит на втором месте (4) на место под индексом, что стоит на первом вместе (0). В конкретном примере добавит 4 на 10-ой индекс, т.е. вначало. Теперь "а" [4, 1, 2, 3]
a = [1,2,3]
a.insert(3, 4) # В конкретном примере добавит 4 на 3-ий индекс, т.е. вконец. Теперь a [1, 2, 3, 4].
a = [1, 2, 3]
a.insert(-1, 4) # Кажется, что здесь должн
#значение 4 добавиться в конец, но на самом деле 4 встанет в предпоследнее место. Тепер "a" [1, 2, 4, 3].
a = [1, 2, 3]
a.extend([4, 5, 6]) # Добавляет данные в список поэлементно. Теперь "а" [1, 2, 3, 4, 5, 6)

#DELETE list

a = [1, 1.1, 'a']
del a[0] # Теперь 'а' равно [1.1, 'a'] >>> del a[-1] # Теперь 'а' равно [1.1]
del a[-1] # Теперь 'а' равно
del a # Полное удаление переменной "а"

a = [1, 2, 3]
a.clear() # Полностью очищает список, превращая его в пустой список. Теперь "а"
a = [1, 2, 3]
а.рор() # Возвращает последний элемент и удаляет его из списка. В примере вернёт 3 и удалит его из списка. Теперь "а" [1, 2]
a = [1, 'ab', 3]
а.рор(1) # Возвращает элемент по указанному ИНДЕКСУ и удаляет его из списка. В примере вернёт 'ab' и удалит его из списка. Теперь "а" [1, 3]. Если такого индекса нет, то возникнет ошибка IndexError: pop index out of range
a = [1, 2, 'ab']
a.remove('ab') # Удаляет элемент по указанному ЗНАЧЕНИЮ из списка. Если данного значения нет, то появится ошибка. Теперь "а" [1, 2]. Если такого значения нет, то возникнет ошибка ValueError: list.remove(x): xnot in list

#методы
a.count()
a.copy()
a.reverse()
a.sort()
a.index()
a.append()
a.insert()
a.extend()

help(list) # Информация о списках
a = [1, 1, 3, 1]
a.count(1) # 3. Возвращает сколько раз в списке встретилось передаваемое значение. В примере вернётся 3, так как в списке три единицы.
a = [1, 2, 3]
a.copy() # [1, 2, 3]. Возвращает копию списка. Это удобно, чтобы скопировать данные в новую переменную и изменять значения уже в новой переменной, чтобы значения в старой переменной не изменились.
a = [1, 2, 3]
a.reverse() # Полностью переворачивает список. Теперь "а" [3, 2, 1]
a = [2, 1, 3]
a.sort() # Сортирует значения в списке в порядке ВОЗРАСТАНИЯ. Теперь "а" [1, 2, 3]
a = [2, 1, 3]
a.sort(reverse=True) # Cортирует значения в списке в порядке УБЫВАНИЯ. Теперь "а" [3, 2, 1]
a= [1, 2, [1, 2, 3]]
b = a.copy() # Скопировали значения из "а" в "в". Теперь "б" [1, 2, [1, 2, 3]].
b[2][0] = 10 # Поменяли значение во вложенном списке списка "в". Теперь "b" [1, 2, [10, 2, 3]].
print(a) # [1, 2, [10, 2, 3]]. Значение в "а" тоже поменялось.
b[0] = 10 # Поменяли значение в списке "в". Теперь "в" [10, 2, [10, 2, 3]].
print(a) # [1, 2, [10, 2, 3]]. Значение в "а" в этот раз не поменялось.
from copy import deepcopy
a = [1, 2, [1, 2, 3]]
b = deepcopy(a) # Теперь "в" [1, 2, [1, 2, 3]]
b[2][0] = 10 # Теперь "в" [1, 2, [10, 2, 3]].
print(a) # [1, 2, [1, 2, 3]]. Значение в "а" не поменялось.
a = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] # Можно так
b = [[0] *3] *3 # А можно так. Только в этом случае есть небольшая особенность.
a[0][0] = 1 # Здесь всё будет как и планировалось. "а" [[1, 0, 0], [0, 0, 0], [0, 0, 0]] >>> b[0][0] = 1 # А здесь, не так как планировалось. "b" [[1, 0, 0], [1, 0, 0], [1, 0, 0]]
